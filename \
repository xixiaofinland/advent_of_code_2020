use std::{
    collections::HashMap,
    fs::File,
    io::{BufRead, BufReader},
};

use crate::AoCResult;


pub fn solve_day4b() -> AoCResult<usize> {
    let reader = BufReader::new(File::open("data/input_day4a.txt")?);
    let mut passports = Vec::new();
    let mut current_passport = String::new();

    for line in reader.lines() {
        let line = line?;
        if line.trim().is_empty() {
            if !current_passport.is_empty() {
                passports.push(current_passport);
                current_passport = String::new();
            }
        } else {
            let data_to_push = if current_passport.is_empty() {
                &line
            } else {
                &format!(" {}", line)
            };

            current_passport.push_str(data_to_push);
        }
    }
    if !current_passport.is_empty() {
        passports.push(current_passport);
    }

    let passport_maps: Vec<HashMap<&str, &str>> = passports
        .iter()
        .map(|p| {
            p.split_whitespace()
                .filter_map(|item| item.split_once(':'))
                .collect()
        })
        .collect();

    let required = ["byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"];
    let count = passport_maps
        .iter()
        .filter(|p| required.iter().all(|key| p.contains_key(key)))
        .filter(|p| {
            let data = p.get("byr").unwrap();
            let byr = data.len() == 4
                && data.chars().all(|d| d.is_ascii_digit())
                && (1920..=2002).contains(&data.parse::<usize>().unwrap());
            byr
        })
        .filter(|&p| {
            let data = p.get("iyr").unwrap();
            let iyr = data.len() == 4
                && data.chars().all(|d| d.is_ascii_digit())
                && (2010..=2020).contains(&data.parse::<usize>().unwrap());
            iyr
        })
        .filter(|p| {
            let data = p.get("eyr").unwrap();
            let eyr = data.len() == 4
                && data.chars().all(|d| d.is_ascii_digit())
                && (2020..=2030).contains(&data.parse::<usize>().unwrap());
            eyr
        })
        .filter(|p| {
            let data = p.get("hgt").unwrap();
            let (first, second) = match data.split_at_checked(data.len().saturating_sub(2)) {
                Some((a, b)) => (a, b),
                None => return false,
            };

            if second != "cm" && second != "in" {
                return false;
            }

            if second == "cm" {
                let cm = first.len() == 3
                    && first.chars().all(|d| d.is_ascii_digit())
                    && (150..=193).contains(&first.parse::<usize>().unwrap());
                cm
            } else {
                let inn = first.len() == 2
                    && first.chars().all(|d| d.is_ascii_digit())
                    && (59..=76).contains(&first.parse::<usize>().unwrap());
                inn
            }
        })
        .filter(|p| {
            let data = p.get("hcl").unwrap();
            let (first, second) = match data.split_at_checked(1) {
                Some((a, b)) => (a, b),
                None => return false,
            };

            first == "#"
                && second.len() == 6
                && second
                    .chars()
                    .all(|d| d.is_ascii_digit() || ('a'..='f').contains(&d))
        })
        .filter(|p| {
            let data = p.get("ecl").unwrap();
            let required = ["amb", "blu", "brn", "gry", "grn", "hzl", "oth"];
            required.contains(data)
        })
        .filter(|p| {
            let data = p.get("pid").unwrap();
            data.len() == 9 && data.chars().all(|d| d.is_ascii_digit())
        })
        .count();

    Ok(count)
}
